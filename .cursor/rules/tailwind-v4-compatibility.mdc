---
description: Tailwind CSS v4 相容性指南
globs: 
alwaysApply: false
---
# Tailwind CSS v4 相容性指南

## Tailwind v4 主要變更

OneKey Balance UI 使用 Tailwind CSS v4，與之前版本相比有許多重要變更：

1. 支持原生 CSS 變數和自定義屬性
2. 使用 `@theme` 替代舊版的 `theme.extend`
3. 在許多地方使用 CSS 原生功能替代工具類補丁
4. 更嚴格的 `@apply` 使用規則
5. 使用新的命名空間和色彩系統

## 配置與主題設置

### CSS 變數取代硬編碼值

在 `app.css` 中使用 `@theme` 區塊定義全局 CSS 變數：

```css
@theme {
  /* 蒸汽波核心配色 */
  --vwave-pink: #ff71ce;
  --vwave-cyan: #01cdfe;
  --vwave-mint: #05ffa1;
  --vwave-lav: #b967ff;
  --vwave-sun: #fffb96;
  
  /* 其他變數... */
}
```

這些變數可在 `tailwind.config.mjs` 中引用：

```js
colors: {
  vwave: {
    pink: 'var(--vwave-pink)',
    cyan: 'var(--vwave-cyan)',
    mint: 'var(--vwave-mint)',
    lav: 'var(--vwave-lav)',
    sun: 'var(--vwave-sun)'
  }
}
```

### 自定義屬性註冊

使用 `@property` 來註冊自定義屬性，特別是需要動畫的顏色：

```css
@property --vwave-pink {
  syntax: '<color>';
  inherits: false;
  initial-value: #ff71ce;
}
```

## 工具類使用

### 使用 @utility 自定義工具類

Tailwind v4 推薦使用 `@utility` 替代舊版的 `@layer utilities`：

```css
@utility vwave-card {
  position: relative;
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: var(--grid-gap);
  /* 其他樣式... */
}
```

### 樣式隔離

使用 `@utility` 創建的類具有更好的樣式隔離，不會被其他樣式覆蓋。

## @apply 使用限制

在 Tailwind CSS v4 中，`@apply` 指令有以下限制：

1. **不能用於任意值語法**：
   - ❌ `@apply bg-[#ffcc00]`
   - ✅ 使用標準 CSS: `background-color: #ffcc00;`

2. **不能用於複合效果**：
   - ❌ `@apply drop-shadow-[0_4px_8px_rgba(0,0,0,0.25)]`
   - ✅ 使用標準 CSS: `filter: drop-shadow(0 4px 8px rgba(0,0,0,0.25));`

3. **不能用於動畫**：
   - ❌ `@apply animate-[pulse_1s_ease-in-out_infinite]`
   - ✅ 使用標準 CSS: `animation: pulse 1s ease-in-out infinite;`

## 顏色系統變更

Tailwind v4 改變了顏色系統：

1. **自定義顏色命名空間**：
   - 使用 `vwave-` 前綴的顏色，如 `text-vwave-pink`
   - 定義在 `tailwind.config.mjs` 的 `theme.extend.colors`

2. **OKLCH 色彩混合**：
   - 支持新的色彩混合功能：`color-mix(in oklch, var(--vwave-pink), var(--vwave-cyan))`
   - 同時提供舊版相容性的線性漸變：`linear-gradient(...)`

## 媒體查詢與響應式設計

使用標準的媒體查詢：

```css
@media (max-width: 640px) {
  .vwave-card {
    padding: 1rem;
    border-radius: 1rem;
  }
}
```

## 動畫系統

自定義動畫需要使用標準的 CSS 關鍵幀：

```css
@keyframes fade-in-up {
  0% { opacity: 0; transform: translateY(20px); }
  100% { opacity: 1; transform: translateY(0); }
}

.fade-up {
  animation: fade-in-up var(--animation-duration) ease-out both;
}
```

## 問題排查與解決方案

1. **無法解析的工具類**：
   - 檢查是否使用了舊版語法或任意值
   - 改用標準 CSS 屬性和變數

2. **動畫不生效**：
   - 確保正確定義了關鍵幀
   - 檢查元素是否有 `position` 屬性（變換效果需要）

3. **顏色不一致**：
   - 確保使用了定義在 `@theme` 中的 CSS 變數
   - 檢查是否正確引用了顏色變數：`var(--vwave-pink)`

## 最佳實踐

1. 優先使用 CSS 變數而非硬編碼值
2. 使用 `@utility` 定義可重用的樣式模塊
3. 避免過度依賴 `@apply`，改用標準 CSS
4. 為顏色和動畫使用自定義屬性
5. 遵循項目中的既有命名約定
